#!/usr/bin/env python
# encoding: utf-8
'''
scanit -- shortdesc

scanit is a description

It defines classes_and_methods

@author:     D'ARtagnan Palmer
            
@copyright:  2014 D'Artagnan Palmer. All rights reserved.
            
@license:    MIT (c) 2014

@contact:    dpalmer@othermusketeer.com
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2014-07-05'
__updated__ = '2014-07-05'

DEBUG = 1
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__
 
    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"
 
    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")
        
        # set defaults
        parser.set_defaults(outfile="./scan.dat", infile="L:\\darBU")
        
        # process options
        (opts, args) = parser.parse_args(argv)
        
        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)
            
        # MAIN BODY #

        
        
    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

# TODO:  Move main functions to separate function

# TODO: Move reusable code to othermusketeer.filestudy.*

#===============================================================================
# import hashlib
# BLOCKSIZE = 65536
# hasher = hashlib.md5()
# with open('anotherfile.txt', 'rb') as afile:
#     buf = afile.read(BLOCKSIZE)
#     while len(buf) > 0:
#         hasher.update(buf)
#         buf = afile.read(BLOCKSIZE)
# print(hasher.hexdigest())
#===============================================================================

    dcache = list()
    for root, dirs, files in os.walk(opts.infile):
        try:
            ri = dcache.index(root)
        except ValueError:
            dcache.append(root)
            ri = dcache.index(root)        
        for filename in files:
            print "{0} : {1}".format(ri,filename)
            #print( os.path.join(root, filename))

if __name__ == "__main__":
    if DEBUG:
        pass
        #sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'scanit_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
    
    
#===============================================================================
# from os import listdir,getcwd,chdir,remove
# from win32api import GetShortPathName
# from sys import argv
# from shutil import copy
# import psyco
# psyco.full()
# dirname = GetShortPathName(argv[1])
# chdir(dirname)
# index = open(dirname+":index.dat","w")
# for file in listdir(getcwd()):
#    try:
#       newname = ":"+file
#       copy(file,newname)
#       index.write(file)
#       index.write('\n')
#       remove(file)
#    except:
#       print "[x] Cannot hide %s"%file
#       pass
# index.close()
# 
# 
# from os import listdir,getcwd,chdir,remove
# from win32api import GetShortPathName
# from sys import argv
# from shutil import copy
# import psyco
# psyco.full()
# dirname = GetShortPathName(argv[1])
# chdir(dirname)
# index = open(dirname+":index.dat").readlines()
# for file in index:
#    file = ":"+file.strip()
#    newname = file[1:]
#    try:
#       copy(file,newname)
#    except:
#       print "[x] Cannot unhide %s"%file
#       pass
#    remove(file)
# remove(":index.dat")
#===============================================================================

